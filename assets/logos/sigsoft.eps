%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (McGraw-Hill Companies) (McGraw-Hill Companies)%%Title: (sigsoft.ill.eps)%%CreationDate: (6/19/97) (10:02 PM)%%BoundingBox: 167 334 454 475%%HiResBoundingBox: 167.7927 334.5162 453.326 474.7634%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 120 -221 672 509%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 432 288%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 0 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -450 900 -1.5 1018 725 18 1 0 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_screens_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)%%Version: 1.1 0%%CreationDate: (03/24/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackingsystemdict beginuserdict /Adobe_screens_AI5 13 dict dup beginput/initialize{	Adobe_screens_AI5 begin	/screenid		deviceDPI 600 gt composite? not or		{		-1		}		{			deviceDPI currentscreen pop pop			dup dup 60 ge exch 150 le and deviceDPI 300 le and		{			pop 60		} if		div 1.41421 div 0.5 add cvi		} ifelse	def		2 screenid eq	{		/customsize 16 def		/customdata /customdata2 def		setcustomscreen	} if		3 screenid eq	{		/customsize 24 def		/customdata /customdata3 def		setcustomscreen	} if		4 screenid eq	{		/customsize 16 def		/customdata /customdata4 def		setcustomscreen	} if		5 screenid eq	{		/customsize 20 def		/customdata /customdata5 def		setcustomscreen	} if		6 screenid eq	{		/customsize 24 def		/customdata /customdata6 def		setcustomscreen	} if		7 screenid eq	{		/customsize 28 def		/customdata /customdata7 def		setcustomscreen	} if		8 screenid eq	{		/customsize 16 def		/customdata /customdata8 def		setcustomscreen	} if} def/terminate{	currentdict Adobe_screens_AI5 eq	{	 end	} if} def/setcustomscreen{	deviceDPI customsize div 0	{		1 add 2 div customsize mul cvi exch		1 add 2 div customsize mul cvi exch		customsize mul add		customdata load exch get 256 div	} setscreen} def/customdata2 28 28 mul string defcurrentfile customdata2 readhexstring4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECDF3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD044483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CFF0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata3 28 28 mul string defcurrentfile customdata3 readhexstring011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F688AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A125998DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A479336B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A177306989C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A115897DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A336C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata4 28 28 mul string defcurrentfile customdata4 readhexstring1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A32C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4CC38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata5 28 28 mul string defcurrentfile customdata5 readhexstring010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B112654A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A9937047334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E092351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B07204EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C29E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9FDAF3E2BA681C07214FA0DBF5E1B8671A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata6 28 28 mul string defcurrentfile customdata6 readhexstring081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A8190ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BDE4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B04071943B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B4864798091AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BEE4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A03061842B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC452280100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop pop/customdata7 28 28 mul string defcurrentfile customdata7 readhexstring01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F05122953A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D73372318253A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CEECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D33161E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E4350657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C220D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F64798499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F360E04112952A5CFEDFAF0DBB25E350Epop pop/customdata8 28 28 mul string defcurrentfile customdata8 readhexstring050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F132939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634BB8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADAF0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFCFFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB96775131210B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000pop popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.3 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 68 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin	Adobe_blend_AI5_vars begin	/invertXfer	{		[		{			1 exch sub		} /exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	} bd} bd/terminate{	currentdict Adobe_blend_AI5_vars eq	{	 end		currentdict Adobe_blend_AI5 eq		{		 end		} if	} if} bd/nullString () def/zeroStringAry 256 string def/dpiThreshold 600 def/tRectOK? deviceDPI dpiThreshold le currentscreen pop pop 150 le and def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 75 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def%/white? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where {pop lv1Fix} {false} ifelse def[/tint1Data/tint2Data/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/ccAry1 5 array def/setCustomColor{	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/blendImg{	setImgSpace cData systemdict /image get	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		cyData mgData yeData cData		mCMYKData		true 4		{			doCImg		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if	} bd} if/colorimage where dup{	exch pop	/doCImg /colorimage load def	/mCMYKData	{		4		{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if			4 1 roll		} repeat	} bd} ifnot{	/mCMYKData nullProc def	/doCImg	{		pop pop		setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind		systemdict /image get exec		sSave restore	} bd} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		cyData mgData yeData cData		setSSave		mCMYKData		true 4		{			doCImg		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		blendImg		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		currentcmykcolor		4		{			makeByte 8 string copy 4 1 roll		} repeat		true 4		{			doCImg		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			/setcmykcolor cvx		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg {{_fill}}			{{_of true eq {currentgray 1 ne {bwFill} if} {bwFill} ifelse}} ifelse def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq					{					setSSave					/cData whiteByte store					/cDataLen 8 store					blendImg					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/d255- 256 array def	0 1 255	{		d255- exch 1 d255 2 index get sub put	} bind for	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		systemdict /setgray get	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if			} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse			} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					systemdict /setgray get exec					systemdict /fill get exec				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse				%%			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq {/blend? false store} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse%	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt {/blend? false def} if		blend?		%		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/getRData{	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			7		} ifelse	} ifelse	index 100 div /endPoint xs	/colorType gMark store	/color? colorType 0 gt store	colorType dup 3 eq	{		/tint2Data gMark store	} if	dup 1 gt	{		/tint1Data gMark store	} if	/cData gMark store	setCDataLen	0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		clip		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/blendImg		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq {0} {bDataLen ubAxis div} ifelse store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where	{		pop 0 0 bInc 1 /rectfill cvx	}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		systemdict /fill get	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt {exch} if pop store				/pChange ubAxis 0 eq {0} {bDataLen ubAxis div} ifelse store		pChange .5 gt dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx systemdict /fill get	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put	 end	} if} bd/Bn{	1 add dict	dup nullString null put	/_bn xs} bd/Bd{	Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store		/_fill {_of true eq {currentgray 1 ne {__fill} if} {__fill} ifelse} def	} ifelse	/fill	{	} def} bd/BB{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_screens_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_blend_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--1 Bn%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFFFFFFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F8F7F7F6F6F6F5F5F4F4F3F3F3F2F2F1F1F0F0EFEFEEEEEDEDECECEBEBEAE9E9E8E8E7E7E6E5E5E4E4E3E2E2E1E0E0DFDFDEDDDDDCDBDBDAD9D8D8D7D6D6D5D4D3D3D2D1D1D0CFCECECDCCCBCACAC9C8C7C6C6C5C4C3C2C2C1C0BFBEBDBCBCBBBAB9B8B7B6B5B5B4B3B2B1B0AFAEADACABABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99>0 %_Br<999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABABACADAEAFB0B1B2B3B4B5B5B6B7B8B9BABBBCBCBDBEBFC0C1C2C2C3C4C5C6C6C7C8C9CACACBCCCDCECECFD0D1D1D2D3D3D4D5D6D6D7D8D8D9DADBDBDCDDDDDEDFDFE0E0E1E2E2E3E4E4E5E5E6E7E7E8E8E9E9EAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F3F4F4F5F5F6F6F6F7F7F8F8F8F9F9F9FAFAFAFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFEFFFFFFFFFFFF>0 %_Br[0.6 0 50 100 %_Bs1 0 65 56 %_Bs0.6 0 35 0 %_BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 1 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D330.8094 -3496.7001 m(N) *330.8094 4279.2471 m(N) *uu0 O322.2926 473.9396 m350.1709 472.9183 352.6215 459.8473 v355.234 445.9148 292.1677 410.0136 269.2933 354.8699 C265.9234 340.165 279.7094 338.3268 V250.9758 339.9862 252.1374 353.6445 v253.5155 369.8487 284.3047 412.0561 333.6277 454.6393 C345.5755 467.5062 322.2926 473.9396 vBb1 (Steel Bar) 266.6985 367.3663 49.9999 169.5927 1 0 0 1 -20.25 26.1875 Bg7754.639 9241.4692 44.8518 -37.6358 -7530.588 -8881.4963 Bc61.0469 72.7517 44.8518 -37.6358 224.051 359.9729 Bm47.9659 57.1626 44.8518 -37.6358 285.0979 432.7245 Bm7754.639 9241.4692 44.8518 -37.6358 333.0638 489.8871 Bcf0 BBu0 g313.9521 418.2592 m301.7666 426.453 290.4501 433.858 290.4501 445.7357 c290.4501 447.4642 290.6684 449.0848 291.0711 450.5999 C293.5645 463.1615 308.0089 472.7992 325.458 472.7992 c334.0079 472.7992 341.5259 470.9319 347.5812 467.0941 C347.5812 467.0941 L340.895 471.1863 332.526 473.9407 322.8861 474.6971 c321.7544 474.7861 320.6147 474.7634 319.4776 474.7634 c302.2669 474.7634 285.887 469.0526 276.9235 457.6957 c272.4847 452.0717 269.8632 445.0641 269.8632 436.6776 c269.8632 429.9806 272.3365 424.3436 276.2023 419.3442 c290.0437 401.4444 321.7422 391.7193 321.7422 370.7994 c321.7422 357.8156 312.9923 348.9352 301.9135 345.1189 C295.4254 342.201 287.7452 340.5058 279.5048 340.5058 c270.4272 340.5058 262.4812 342.2842 255.6094 345.7687 C263.0739 340.1002 272.0853 336.4579 282.5873 335.074 c285.3376 334.7113 288.1564 334.5162 291.0315 334.5162 c303.1215 334.5162 314.2554 337.8543 323.1568 343.4569 c330.6121 348.1492 336.1437 353.9008 339.4756 360.5658 c342.2158 366.0473 343.5643 372.0013 343.5643 378.0048 c343.5643 394.8562 332.7014 405.0551 320.8008 413.5521 c318.5326 415.1715 316.2275 416.729 313.9521 418.2592 CFUUu*u171.4317 407.4409 m171.4317 400.9295 174.0189 398.4716 177.8136 398.4716 c183.5919 398.4716 185.3599 401.7057 185.3599 404.4655 c185.3599 411.8392 171.8629 411.2787 171.8629 420.2479 c171.8629 425.3793 175.7438 429.0878 182.4276 429.0878 c185.1443 429.0878 188.3352 428.6134 191.095 427.4923 c190.3188 419.1267 L188.1627 419.1267 L188.1627 423.2233 186.4379 427.1904 181.8239 427.1904 c178.4173 427.1904 176.0025 424.8619 176.0025 421.5847 c176.0025 414.4265 189.4995 415.8495 189.4995 405.8022 c189.4995 400.2827 185.748 396.5743 177.4255 396.5743 c174.0189 396.5743 170.5692 397.178 168.4132 398.0835 c169.2756 407.4409 L171.4317 407.4409 lf*U*u213.5645 404.7673 m213.392 403.8187 213.2195 402.87 213.2195 401.9213 c213.2195 400.4552 213.6507 399.1616 216.4967 399.1616 c216.238 397.2642 L204.4228 397.2642 L204.6815 399.1616 L207.01 399.334 207.9587 400.0671 208.3899 402.6113 c211.4947 420.8947 L211.6671 421.8434 211.8396 422.792 211.8396 423.7407 c211.8396 425.2068 211.4084 426.5005 208.5624 426.5005 c208.8211 428.3978 L220.6364 428.3978 L220.3777 426.5005 L218.0491 426.328 217.1004 425.5949 216.6692 423.0508 C213.5645 404.7673 lf*U*u261.0858 418.0487 m258.9297 418.0487 L258.8434 423.8701 257.1186 427.1904 251.4266 427.1904 c243.3629 427.1904 238.7489 419.4286 238.7489 410.5456 c238.7489 402.0076 244.0097 398.8166 249.1411 398.8166 c251.0385 398.8166 252.6771 399.0753 253.8414 399.3772 c254.8763 403.948 255.2212 406.2335 255.2212 406.9665 c255.2212 408.6051 254.4019 409.2519 251.6422 409.2519 c251.8147 411.1493 L264.3199 411.1493 L264.0611 409.2519 L261.6463 409.1657 260.2664 408.6914 259.6627 405.5866 c258.1535 397.8679 L256.0837 397.2642 252.5046 396.5743 248.8393 396.5743 c239.0939 396.5743 233.5743 401.8351 233.5743 410.6318 c233.5743 421.4553 240.7325 429.0878 251.944 429.0878 c255.8249 429.0878 259.404 428.5272 262.2069 427.7941 C261.0858 418.0487 lf*U*u374.4414 415.4614 m374.4414 406.2335 367.6282 396.5743 357.6241 396.5743 c351.4577 396.5743 345.507 401.1451 345.507 410.2006 c345.507 419.4286 352.3202 429.0878 362.3243 429.0878 c368.4907 429.0878 374.4414 424.5169 374.4414 415.4614 cf1 D350.4228 407.7858 m350.4228 401.6626 353.4413 398.4716 357.7966 398.4716 c364.8685 398.4716 369.5256 409.4244 369.5256 417.8762 c369.5256 423.9994 366.5071 427.1904 362.1518 427.1904 c355.0799 427.1904 350.4228 416.2376 350.4228 407.7858 cf*U*u0 D385.5283 397.2642 m385.7871 399.1616 L388.1156 399.334 389.0643 400.0671 389.4955 402.6113 c392.6002 420.8947 L392.7727 421.8434 392.9452 422.792 392.9452 423.7407 c392.9452 425.2068 392.514 426.5005 389.668 426.5005 c389.9267 428.3978 L408.3827 428.3978 L410.1506 428.3978 412.048 428.5703 413.471 428.7428 c412.4361 418.7386 L410.5387 418.7386 L410.28 425.1637 409.6763 426.5005 401.9576 426.5005 c398.5079 426.5005 L398.1198 425.2068 397.6023 423.3526 397.3436 421.7571 c396.0931 414.3403 L402.4319 414.3403 403.165 414.8146 404.5017 419.0836 c406.4853 419.0836 L404.2861 406.7078 L402.3888 406.7078 L402.3888 411.8824 401.8282 412.4429 395.705 412.4429 c394.4976 405.2848 L394.2389 403.8187 394.0664 402.87 394.0664 401.9213 c394.0664 400.4552 394.4976 399.1616 397.5161 399.1616 c397.1711 397.2642 L385.5283 397.2642 lf*U*u425.0384 419.5148 m426.9789 428.7428 L427.8844 428.6566 428.9194 428.5703 429.9974 428.5272 c431.1185 428.4409 432.3259 428.3978 433.6196 428.3978 c446.901 428.3978 L448.7983 428.3978 450.6956 428.4841 453.326 428.7428 c452.1618 418.9111 L450.0057 418.9111 L449.7038 424.9481 449.1433 426.1555 442.3732 426.5005 c438.5354 405.0692 L438.3198 403.8187 438.2336 402.87 438.2336 401.9213 c438.2336 400.4552 438.751 399.1616 442.0282 399.1616 c441.7695 397.2642 L428.4881 397.2642 L428.7469 399.1616 L431.7222 399.1616 432.8865 400.1102 433.3177 402.6113 c437.7592 426.5005 L432.2397 426.5005 429.6093 425.6812 427.1083 419.5148 C425.0384 419.5148 lf*UUu*u169.6097 378.9123 m168.7282 379.2811 168.0176 379.578 168.0176 380.6484 c168.0176 381.1611 168.2335 381.6648 168.6473 381.9707 c169.115 382.3125 169.7447 382.3485 170.1405 382.3485 c171.0489 382.3485 171.6336 382.0876 171.9035 381.44 c172.0564 381.0802 172.0384 380.7563 172.0294 380.5764 c171.2288 380.5764 L171.2199 380.7383 171.2199 380.9362 171.1569 381.1341 c170.977 381.6648 170.5003 381.8088 170.0955 381.8088 c169.3759 381.8088 168.8632 381.413 168.8632 380.7833 c168.8632 380.1177 169.3759 379.9108 170.0775 379.623 c170.5003 379.461 L171.2558 379.1552 172.1643 378.7954 172.1643 377.626 c172.1643 377.2662 172.0744 376.9784 171.9664 376.7535 c171.4537 375.7821 170.2664 375.7821 169.9426 375.7821 c168.8901 375.7821 168.4404 376.1509 168.3055 376.2858 c167.8017 376.7445 167.7927 377.4102 167.7927 377.761 c168.6563 377.761 L168.6653 377.4821 168.6653 377.0324 168.9711 376.6996 c169.142 376.5197 169.4658 376.3218 169.9965 376.3218 c170.932 376.3218 171.2918 376.8975 171.2918 377.5001 c171.2918 378.2467 170.7521 378.4626 170.0775 378.7324 C169.6097 378.9123 lf*U*u174.236 378.3097 m174.236 375.89 L173.3634 375.89 L173.3634 382.2405 L175.3064 382.2405 L175.6122 382.2405 175.9001 382.2495 176.1789 382.1775 c176.7726 382.0336 177.1324 381.6468 177.3033 381.0802 c177.3752 380.8373 177.4022 380.5854 177.4022 380.3336 c177.4022 379.7219 177.2493 379.1012 176.7906 378.7234 c176.2958 378.3097 175.6032 378.3097 175.0635 378.3097 C174.236 378.3097 lf1 D174.236 378.9213 m175.0725 378.9213 L175.7201 378.9123 176.5297 378.9483 176.5297 380.2796 c176.5297 380.4775 176.5297 381.1161 176.1069 381.431 c175.8101 381.6378 175.3693 381.6378 175.0365 381.6289 c174.236 381.6289 L174.236 378.9213 lf*U*u0 D182.1724 375.89 m178.4124 375.89 L178.4124 382.2405 L181.9295 382.2405 L181.9295 381.6289 L179.2849 381.6289 L179.2849 379.497 L181.7046 379.497 L181.7046 378.8854 L179.2849 378.8854 L179.2849 376.5017 L182.1724 376.5017 L182.1724 375.89 lf*U*u187.9948 377.8509 m187.9589 377.5901 187.9139 377.1943 187.689 376.8165 c187.1763 375.926 186.1419 375.7731 185.4762 375.7731 c183.2005 375.7731 183.0206 377.5901 183.0206 378.8494 c183.0206 379.7039 183.1105 380.8553 183.6772 381.5569 c184.3428 382.3665 185.3683 382.3665 185.6561 382.3665 c187.1313 382.3665 187.9409 381.6738 187.9409 380.2796 c187.0863 380.2796 L187.0953 381.5389 186.2498 381.8267 185.6201 381.8267 c184.1809 381.8267 183.9291 380.4145 183.9291 378.7864 c183.9291 377.9319 184.001 376.3128 185.5392 376.3128 c185.962 376.3128 186.3577 376.4477 186.6186 376.6726 c187.0324 377.0324 187.0953 377.5361 187.1313 377.8509 C187.9948 377.8509 lf*U*u189.941 375.89 m189.0685 375.89 L189.0685 382.2405 L189.941 382.2405 L189.941 375.89 lf*U*u196.5987 375.89 m195.6902 375.89 L194.8447 378.3726 L192.5689 378.3726 L191.6064 375.89 L190.8059 375.89 L193.3515 382.2405 L194.3769 382.2405 L196.5987 375.89 lf1 D194.6378 378.9573 m194.0441 380.7203 L193.9272 381.0622 193.8822 381.2061 193.7743 381.5569 c193.6393 381.1881 193.6123 381.1161 193.4684 380.7203 c192.7938 378.9573 L194.6378 378.9573 lf*U*u0 D201.2255 375.89 m197.4745 375.89 L197.4745 382.2495 L198.3471 382.2495 L198.3471 376.5017 L201.2255 376.5017 L201.2255 375.89 lf*U*u205.817 375.89 m204.9445 375.89 L204.9445 382.2405 L205.817 382.2405 L205.817 375.89 lf*U*u212.3578 375.89 m211.4043 375.89 L208.6158 380.3246 L208.4179 380.6574 208.283 380.8733 208.0761 381.2331 c208.1121 380.8193 208.1121 380.6574 208.1211 380.2706 c208.1211 375.89 L207.3655 375.89 L207.3655 382.2405 L208.346 382.2405 L210.8106 378.3007 L211.1974 377.671 211.2874 377.5091 211.6472 376.8165 c211.6382 377.5991 211.6292 377.689 211.6112 378.4716 c211.6112 382.2405 L212.3578 382.2405 L212.3578 375.89 lf*U*u215.9034 375.89 m215.0399 375.89 L215.0399 381.6378 L213.2139 381.6378 L213.2139 382.2495 L217.7114 382.2495 L217.7114 381.6378 L215.9034 381.6378 L215.9034 375.89 lf*U*u222.3375 375.89 m218.5775 375.89 L218.5775 382.2405 L222.0946 382.2405 L222.0946 381.6289 L219.45 381.6289 L219.45 379.497 L221.8697 379.497 L221.8697 378.8854 L219.45 378.8854 L219.45 376.5017 L222.3375 376.5017 L222.3375 375.89 lf*U*u227.6382 377.2483 m227.8991 376.2948 227.9261 376.1868 228.1689 375.89 c227.2514 375.89 L227.1705 375.98 227.0985 376.0519 227.0176 376.2858 c226.9726 376.4297 226.9276 376.5826 226.8287 377.0144 c226.7567 377.3202 L226.6668 377.689 226.5498 378.1208 226.271 378.3726 c225.9202 378.6785 225.4254 378.6785 225.0746 378.6695 c224.2741 378.6695 L224.2741 375.89 L223.4285 375.89 L223.4285 382.2495 L225.7403 382.2495 L226.199 382.2405 226.7927 382.2405 227.2245 381.8537 c227.4763 381.6289 227.7192 381.2061 227.7192 380.6124 c227.7192 380.3605 227.6742 380.1177 227.5843 379.8928 c227.3144 379.2092 226.7657 379.0383 226.5498 378.9663 c226.7117 378.9033 226.9276 378.8314 227.1255 378.5975 c227.3324 378.3457 227.4403 377.9949 227.5393 377.626 C227.6382 377.2483 lf1 D224.2741 379.2811 m225.0656 379.2811 L225.6953 379.2722 226.1181 379.2901 226.3969 379.479 c226.7297 379.6949 226.8467 380.0727 226.8467 380.4685 c226.8467 380.6304 226.8467 381.2331 226.307 381.5029 c226.0641 381.6199 225.7762 381.6289 225.1736 381.6378 c224.2741 381.6378 L224.2741 379.2811 lf*U*u0 D232.8024 375.89 m229.0424 375.89 L229.0424 382.2405 L232.5595 382.2405 L232.5595 381.6289 L229.9149 381.6289 L229.9149 379.497 L232.3346 379.497 L232.3346 378.8854 L229.9149 378.8854 L229.9149 376.5017 L232.8024 376.5017 L232.8024 375.89 lf*U*u235.1977 378.9123 m234.3162 379.2811 233.6056 379.578 233.6056 380.6484 c233.6056 381.1611 233.8215 381.6648 234.2353 381.9707 c234.703 382.3125 235.3327 382.3485 235.7284 382.3485 c236.6369 382.3485 237.2216 382.0876 237.4915 381.44 c237.6444 381.0802 237.6264 380.7563 237.6174 380.5764 c236.8168 380.5764 L236.8078 380.7383 236.8078 380.9362 236.7449 381.1341 c236.565 381.6648 236.0882 381.8088 235.6835 381.8088 c234.9638 381.8088 234.4511 381.413 234.4511 380.7833 c234.4511 380.1177 234.9638 379.9108 235.6655 379.623 c236.0882 379.461 L236.8438 379.1552 237.7523 378.7954 237.7523 377.626 c237.7523 377.2662 237.6624 376.9784 237.5544 376.7535 c237.0417 375.7821 235.8544 375.7821 235.5305 375.7821 c234.4781 375.7821 234.0284 376.1509 233.8934 376.2858 c233.3897 376.7445 233.3807 377.4102 233.3807 377.761 c234.2442 377.761 L234.2532 377.4821 234.2532 377.0324 234.5591 376.6996 c234.73 376.5197 235.0538 376.3218 235.5845 376.3218 c236.52 376.3218 236.8798 376.8975 236.8798 377.5001 c236.8798 378.2467 236.3401 378.4626 235.6655 378.7324 C235.1977 378.9123 lf*U*u240.9483 375.89 m240.0848 375.89 L240.0848 381.6378 L238.2588 381.6378 L238.2588 382.2495 L242.7563 382.2495 L242.7563 381.6378 L240.9483 381.6378 L240.9483 375.89 lf*U*u251.1169 375.89 m250.3613 375.89 L250.3613 376.3937 L250.2444 376.2768 250.1185 376.1599 249.8486 376.0249 c249.4079 375.809 248.9581 375.7731 248.6163 375.7731 c246.3675 375.7731 246.1337 377.4821 246.1337 378.8404 c246.1337 379.7039 246.2236 380.8553 246.7903 381.5569 c247.4559 382.3665 248.4904 382.3665 248.7692 382.3665 c250.2534 382.3665 251.063 381.6738 251.054 380.2706 c250.1994 380.2706 L250.2174 381.5389 249.3719 381.8267 248.7422 381.8267 c247.294 381.8267 247.0422 380.4145 247.0422 378.7774 c247.0422 377.5001 247.294 376.3128 248.7152 376.3128 c249.138 376.3128 249.5788 376.4207 249.8756 376.6456 c250.3433 376.9874 250.3523 377.3922 250.3613 377.779 c250.3613 378.5076 L248.9311 378.5076 L248.9311 379.1192 L251.1169 379.1192 L251.1169 375.89 lf*U*u256.7872 377.2483 m257.048 376.2948 257.075 376.1868 257.3179 375.89 c256.4004 375.89 L256.3195 375.98 256.2475 376.0519 256.1665 376.2858 c256.1216 376.4297 256.0766 376.5826 255.9776 377.0144 c255.9057 377.3202 L255.8157 377.689 255.6988 378.1208 255.4199 378.3726 c255.0691 378.6785 254.5744 378.6785 254.2236 378.6695 c253.423 378.6695 L253.423 375.89 L252.5775 375.89 L252.5775 382.2495 L254.8892 382.2495 L255.348 382.2405 255.9417 382.2405 256.3734 381.8537 c256.6253 381.6289 256.8681 381.2061 256.8681 380.6124 c256.8681 380.3605 256.8232 380.1177 256.7332 379.8928 c256.4634 379.2092 255.9147 379.0383 255.6988 378.9663 c255.8607 378.9033 256.0766 378.8314 256.2745 378.5975 c256.4814 378.3457 256.5893 377.9949 256.6882 377.626 C256.7872 377.2483 lf1 D253.423 379.2811 m254.2146 379.2811 L254.8443 379.2722 255.267 379.2901 255.5459 379.479 c255.8787 379.6949 255.9956 380.0727 255.9956 380.4685 c255.9956 380.6304 255.9956 381.2331 255.4559 381.5029 c255.2131 381.6199 254.9252 381.6289 254.3226 381.6378 c253.423 381.6378 L253.423 379.2811 lf*U*u0 D263.1387 377.9769 m263.0667 377.4911 262.9228 377.0054 262.626 376.6276 c261.9693 375.7731 260.9259 375.7731 260.5931 375.7731 c260.1523 375.7731 259.7835 375.827 259.4507 375.935 c258.6052 376.2318 257.9395 376.8975 257.9395 378.7594 c257.9395 378.8944 257.9395 379.0383 257.9485 379.1822 c257.9665 379.9288 258.0475 380.8553 258.5062 381.4759 c259.1809 382.3665 260.3142 382.3665 260.6381 382.3665 c261.0338 382.3665 261.4386 382.3215 261.8164 382.1775 c262.1582 382.0426 262.482 381.8177 262.6979 381.5299 c263.1567 380.9362 263.2286 379.9288 263.2286 379.1642 c263.2286 378.7684 263.2016 378.3726 263.1387 377.9769 cf1 D262.2302 380.5315 m262.0503 381.341 261.5556 381.8267 260.6381 381.8267 c260.4042 381.8267 260.1703 381.7998 259.9544 381.7188 c259.0819 381.395 258.839 380.5135 258.839 378.8224 c258.839 378.2557 258.902 377.5181 259.1539 377.0594 c259.5407 376.3667 260.1973 376.3128 260.5571 376.3128 c260.8 376.3128 261.0428 376.3488 261.2677 376.4387 c261.5016 376.5287 261.7085 376.6816 261.8614 376.8795 c262.2752 377.4102 262.3291 378.5256 262.3291 379.2452 c262.3291 379.6769 262.3201 380.1087 262.2302 380.5315 cf*U*u0 D269.2228 382.2405 m269.2228 378.2737 L269.2228 377.671 269.2228 376.9514 268.6471 376.3937 c268.3593 376.1059 267.8016 375.7821 266.8211 375.7821 c266.0296 375.7821 265.3729 375.998 265.0131 376.3667 c264.5094 376.8795 264.5004 377.626 264.5004 378.1658 c264.5004 382.2405 L265.3639 382.2405 L265.3639 378.3816 L265.3639 377.8869 265.3729 377.2483 265.6518 376.8615 c266.0385 376.3308 266.7312 376.3308 266.9201 376.3308 c267.6846 376.3308 268.0354 376.6906 268.1524 376.8525 c268.4312 377.2213 268.4492 377.815 268.4672 378.3726 c268.4672 382.2405 L269.2228 382.2405 lf*U*u271.6009 378.3097 m271.6009 375.89 L270.7284 375.89 L270.7284 382.2405 L272.6713 382.2405 L272.9771 382.2405 273.265 382.2495 273.5438 382.1775 c274.1375 382.0336 274.4973 381.6468 274.6682 381.0802 c274.7402 380.8373 274.7671 380.5854 274.7671 380.3336 c274.7671 379.7219 274.6142 379.1012 274.1555 378.7234 c273.6607 378.3097 272.9681 378.3097 272.4284 378.3097 C271.6009 378.3097 lf1 D271.6009 378.9213 m272.4374 378.9213 L273.0851 378.9123 273.8946 378.9483 273.8946 380.2796 c273.8946 380.4775 273.8946 381.1161 273.4718 381.431 c273.175 381.6378 272.7342 381.6378 272.4014 381.6289 c271.6009 381.6289 L271.6009 378.9213 lf*U*u0 D283.6946 377.9769 m283.6226 377.4911 283.4787 377.0054 283.1818 376.6276 c282.5252 375.7731 281.4818 375.7731 281.149 375.7731 c280.7082 375.7731 280.3394 375.827 280.0066 375.935 c279.1611 376.2318 278.4954 376.8975 278.4954 378.7594 c278.4954 378.8944 278.4954 379.0383 278.5044 379.1822 c278.5224 379.9288 278.6034 380.8553 279.0621 381.4759 c279.7367 382.3665 280.8701 382.3665 281.1939 382.3665 c281.5897 382.3665 281.9945 382.3215 282.3723 382.1775 c282.7141 382.0426 283.0379 381.8177 283.2538 381.5299 c283.7126 380.9362 283.7845 379.9288 283.7845 379.1642 c283.7845 378.7684 283.7575 378.3726 283.6946 377.9769 cf1 D282.7861 380.5315 m282.6062 381.341 282.1114 381.8267 281.1939 381.8267 c280.9601 381.8267 280.7262 381.7998 280.5103 381.7188 c279.6378 381.395 279.3949 380.5135 279.3949 378.8224 c279.3949 378.2557 279.4579 377.5181 279.7097 377.0594 c280.0965 376.3667 280.7532 376.3128 281.113 376.3128 c281.3558 376.3128 281.5987 376.3488 281.8236 376.4387 c282.0575 376.5287 282.2643 376.6816 282.4173 376.8795 c282.831 377.4102 282.885 378.5256 282.885 379.2452 c282.885 379.6769 282.876 380.1087 282.7861 380.5315 cf*U*u0 D290.1025 375.89 m289.149 375.89 L286.3605 380.3246 L286.1627 380.6574 286.0277 380.8733 285.8208 381.2331 c285.8568 380.8193 285.8568 380.6574 285.8658 380.2706 c285.8658 375.89 L285.1102 375.89 L285.1102 382.2405 L286.0907 382.2405 L288.5553 378.3007 L288.9421 377.671 289.0321 377.5091 289.3919 376.8165 c289.3829 377.5991 289.3739 377.689 289.3559 378.4716 c289.3559 382.2405 L290.1025 382.2405 L290.1025 375.89 lf*U*u350.5139 378.9123 m349.6324 379.2811 348.9218 379.578 348.9218 380.6484 c348.9218 381.1611 349.1377 381.6648 349.5515 381.9707 c350.0192 382.3125 350.6489 382.3485 351.0446 382.3485 c351.9532 382.3485 352.5378 382.0876 352.8077 381.44 c352.9606 381.0802 352.9426 380.7563 352.9336 380.5764 c352.1331 380.5764 L352.124 380.7383 352.124 380.9362 352.0611 381.1341 c351.8812 381.6648 351.4044 381.8088 350.9997 381.8088 c350.2801 381.8088 349.7673 381.413 349.7673 380.7833 c349.7673 380.1177 350.2801 379.9108 350.9817 379.623 c351.4044 379.461 L352.16 379.1552 353.0685 378.7954 353.0685 377.626 c353.0685 377.2662 352.9786 376.9784 352.8706 376.7535 c352.3579 375.7821 351.1706 375.7821 350.8468 375.7821 c349.7943 375.7821 349.3446 376.1509 349.2097 376.2858 c348.7059 376.7445 348.6969 377.4102 348.6969 377.761 c349.5605 377.761 L349.5695 377.4821 349.5695 377.0324 349.8753 376.6996 c350.0462 376.5197 350.37 376.3218 350.9007 376.3218 c351.8362 376.3218 352.196 376.8975 352.196 377.5001 c352.196 378.2467 351.6563 378.4626 350.9817 378.7324 C350.5139 378.9123 lf*U*u359.125 377.9769 m359.053 377.4911 358.9091 377.0054 358.6123 376.6276 c357.9556 375.7731 356.9122 375.7731 356.5794 375.7731 c356.1386 375.7731 355.7698 375.827 355.437 375.935 c354.5915 376.2318 353.9258 376.8975 353.9258 378.7594 c353.9258 378.8944 353.9258 379.0383 353.9348 379.1822 c353.9528 379.9288 354.0338 380.8553 354.4925 381.4759 c355.1671 382.3665 356.3005 382.3665 356.6243 382.3665 c357.0201 382.3665 357.4249 382.3215 357.8027 382.1775 c358.1445 382.0426 358.4683 381.8177 358.6842 381.5299 c359.143 380.9362 359.2149 379.9288 359.2149 379.1642 c359.2149 378.7684 359.1879 378.3726 359.125 377.9769 cf1 D358.2165 380.5315 m358.0366 381.341 357.5418 381.8267 356.6243 381.8267 c356.3905 381.8267 356.1566 381.7998 355.9407 381.7188 c355.0682 381.395 354.8253 380.5135 354.8253 378.8224 c354.8253 378.2557 354.8883 377.5181 355.1402 377.0594 c355.5269 376.3667 356.1836 376.3128 356.5434 376.3128 c356.7863 376.3128 357.0291 376.3488 357.254 376.4387 c357.4879 376.5287 357.6948 376.6816 357.8477 376.8795 c358.2614 377.4102 358.3154 378.5256 358.3154 379.2452 c358.3154 379.6769 358.3064 380.1087 358.2165 380.5315 cf*U*u0 D361.3232 375.89 m360.4507 375.89 L360.4507 382.2495 L363.9408 382.2495 L363.9408 381.6378 L361.3232 381.6378 L361.3232 379.3351 L363.7789 379.3351 L363.7789 378.7234 L361.3232 378.7234 L361.3232 375.89 lf*U*u366.8375 375.89 m365.974 375.89 L365.974 381.6378 L364.148 381.6378 L364.148 382.2495 L368.6455 382.2495 L368.6455 381.6378 L366.8375 381.6378 L366.8375 375.89 lf*U*u374.8817 375.89 m373.6044 375.89 L372.7949 379.596 L372.6689 380.2076 372.6419 380.3336 372.561 381.0082 c372.4171 380.2706 372.3721 380.0817 372.2192 379.47 c371.2927 375.89 L369.9974 375.89 L368.7291 382.2405 L369.6016 382.2405 L370.4921 377.4731 L370.5461 377.1763 370.654 376.6276 370.699 376.4027 c370.8339 376.9064 370.8429 376.9604 370.9689 377.4192 c372.2462 382.2405 L372.9748 382.2405 L374.1531 377.0774 L374.2161 376.7625 374.2251 376.7445 374.297 376.4297 c374.378 376.7086 374.423 376.8795 374.4589 377.0504 c375.6553 382.2405 L376.4019 382.2405 L374.8817 375.89 lf*U*u382.2959 375.89 m381.3874 375.89 L380.5419 378.3726 L378.2661 378.3726 L377.3036 375.89 L376.5031 375.89 L379.0487 382.2405 L380.0741 382.2405 L382.2959 375.89 lf1 D380.335 378.9573 m379.7413 380.7203 L379.6244 381.0622 379.5794 381.2061 379.4714 381.5569 c379.3365 381.1881 379.3095 381.1161 379.1656 380.7203 c378.491 378.9573 L380.335 378.9573 lf*U*u0 D387.2825 377.2483 m387.5433 376.2948 387.5703 376.1868 387.8132 375.89 c386.8957 375.89 L386.8147 375.98 386.7428 376.0519 386.6618 376.2858 c386.6168 376.4297 386.5719 376.5826 386.4729 377.0144 c386.401 377.3202 L386.311 377.689 386.1941 378.1208 385.9152 378.3726 c385.5644 378.6785 385.0697 378.6785 384.7189 378.6695 c383.9183 378.6695 L383.9183 375.89 L383.0728 375.89 L383.0728 382.2495 L385.3845 382.2495 L385.8433 382.2405 386.4369 382.2405 386.8687 381.8537 c387.1206 381.6289 387.3634 381.2061 387.3634 380.6124 c387.3634 380.3605 387.3184 380.1177 387.2285 379.8928 c386.9586 379.2092 386.41 379.0383 386.1941 378.9663 c386.356 378.9033 386.5719 378.8314 386.7698 378.5975 c386.9766 378.3457 387.0846 377.9949 387.1835 377.626 C387.2825 377.2483 lf1 D383.9183 379.2811 m384.7099 379.2811 L385.3395 379.2722 385.7623 379.2901 386.0411 379.479 c386.374 379.6949 386.4909 380.0727 386.4909 380.4685 c386.4909 380.6304 386.4909 381.2331 385.9512 381.5029 c385.7083 381.6199 385.4205 381.6289 384.8178 381.6378 c383.9183 381.6378 L383.9183 379.2811 lf*U*u0 D392.3567 375.89 m388.5967 375.89 L388.5967 382.2405 L392.1138 382.2405 L392.1138 381.6289 L389.4692 381.6289 L389.4692 379.497 L391.8889 379.497 L391.8889 378.8854 L389.4692 378.8854 L389.4692 376.5017 L392.3567 376.5017 L392.3567 375.89 lf*U*u399.6467 375.89 m395.8868 375.89 L395.8868 382.2405 L399.4039 382.2405 L399.4039 381.6289 L396.7593 381.6289 L396.7593 379.497 L399.179 379.497 L399.179 378.8854 L396.7593 378.8854 L396.7593 376.5017 L399.6467 376.5017 L399.6467 375.89 lf*U*u405.6491 375.89 m404.6956 375.89 L401.9072 380.3246 L401.7093 380.6574 401.5744 380.8733 401.3675 381.2331 c401.4035 380.8193 401.4035 380.6574 401.4124 380.2706 c401.4124 375.89 L400.6569 375.89 L400.6569 382.2405 L401.6373 382.2405 L404.102 378.3007 L404.4888 377.671 404.5787 377.5091 404.9385 376.8165 c404.9295 377.5991 404.9205 377.689 404.9025 378.4716 c404.9025 382.2405 L405.6491 382.2405 L405.6491 375.89 lf*U*u411.8123 375.89 m411.0567 375.89 L411.0567 376.3937 L410.9398 376.2768 410.8138 376.1599 410.544 376.0249 c410.1032 375.809 409.6535 375.7731 409.3116 375.7731 c407.0629 375.7731 406.829 377.4821 406.829 378.8404 c406.829 379.7039 406.919 380.8553 407.4857 381.5569 c408.1513 382.3665 409.1857 382.3665 409.4646 382.3665 c410.9487 382.3665 411.7583 381.6738 411.7493 380.2706 c410.8948 380.2706 L410.9128 381.5389 410.0672 381.8267 409.4376 381.8267 c407.9894 381.8267 407.7375 380.4145 407.7375 378.7774 c407.7375 377.5001 407.9894 376.3128 409.4106 376.3128 c409.8334 376.3128 410.2741 376.4207 410.5709 376.6456 c411.0387 376.9874 411.0477 377.3922 411.0567 377.779 c411.0567 378.5076 L409.6265 378.5076 L409.6265 379.1192 L411.8123 379.1192 L411.8123 375.89 lf*U*u414.0644 375.89 m413.1919 375.89 L413.1919 382.2405 L414.0644 382.2405 L414.0644 375.89 lf*U*u420.5152 375.89 m419.5617 375.89 L416.7733 380.3246 L416.5754 380.6574 416.4405 380.8733 416.2336 381.2331 c416.2696 380.8193 416.2696 380.6574 416.2785 380.2706 c416.2785 375.89 L415.523 375.89 L415.523 382.2405 L416.5034 382.2405 L418.9681 378.3007 L419.3549 377.671 419.4448 377.5091 419.8046 376.8165 c419.7956 377.5991 419.7866 377.689 419.7686 378.4716 c419.7686 382.2405 L420.5152 382.2405 L420.5152 375.89 lf*U*u425.7339 375.89 m421.974 375.89 L421.974 382.2405 L425.491 382.2405 L425.491 381.6289 L422.8465 381.6289 L422.8465 379.497 L425.2662 379.497 L425.2662 378.8854 L422.8465 378.8854 L422.8465 376.5017 L425.7339 376.5017 L425.7339 375.89 lf*U*u430.5039 375.89 m426.744 375.89 L426.744 382.2405 L430.2611 382.2405 L430.2611 381.6289 L427.6165 381.6289 L427.6165 379.497 L430.0362 379.497 L430.0362 378.8854 L427.6165 378.8854 L427.6165 376.5017 L430.5039 376.5017 L430.5039 375.89 lf*U*u435.7148 377.2483 m435.9756 376.2948 436.0026 376.1868 436.2455 375.89 c435.328 375.89 L435.247 375.98 435.1751 376.0519 435.0941 376.2858 c435.0491 376.4297 435.0042 376.5826 434.9052 377.0144 c434.8332 377.3202 L434.7433 377.689 434.6264 378.1208 434.3475 378.3726 c433.9967 378.6785 433.502 378.6785 433.1512 378.6695 c432.3506 378.6695 L432.3506 375.89 L431.5051 375.89 L431.5051 382.2495 L433.8168 382.2495 L434.2756 382.2405 434.8692 382.2405 435.301 381.8537 c435.5529 381.6289 435.7957 381.2061 435.7957 380.6124 c435.7957 380.3605 435.7507 380.1177 435.6608 379.8928 c435.3909 379.2092 434.8423 379.0383 434.6264 378.9663 c434.7883 378.9033 435.0042 378.8314 435.2021 378.5975 c435.4089 378.3457 435.5169 377.9949 435.6158 377.626 C435.7148 377.2483 lf1 D432.3506 379.2811 m433.1422 379.2811 L433.7718 379.2722 434.1946 379.2901 434.4734 379.479 c434.8063 379.6949 434.9232 380.0727 434.9232 380.4685 c434.9232 380.6304 434.9232 381.2331 434.3835 381.5029 c434.1406 381.6199 433.8528 381.6289 433.2501 381.6378 c432.3506 381.6378 L432.3506 379.2811 lf*U*u0 D437.9015 375.89 m437.029 375.89 L437.029 382.2405 L437.9015 382.2405 L437.9015 375.89 lf*U*u444.3523 375.89 m443.3989 375.89 L440.6104 380.3246 L440.4125 380.6574 440.2776 380.8733 440.0707 381.2331 c440.1067 380.8193 440.1067 380.6574 440.1157 380.2706 c440.1157 375.89 L439.3601 375.89 L439.3601 382.2405 L440.3405 382.2405 L442.8052 378.3007 L443.192 377.671 443.2819 377.5091 443.6417 376.8165 c443.6327 377.5991 443.6237 377.689 443.6057 378.4716 c443.6057 382.2405 L444.3523 382.2405 L444.3523 375.89 lf*U*u450.5155 375.89 m449.7599 375.89 L449.7599 376.3937 L449.643 376.2768 449.517 376.1599 449.2472 376.0249 c448.8064 375.809 448.3567 375.7731 448.0149 375.7731 c445.7661 375.7731 445.5322 377.4821 445.5322 378.8404 c445.5322 379.7039 445.6222 380.8553 446.1889 381.5569 c446.8545 382.3665 447.8889 382.3665 448.1678 382.3665 c449.652 382.3665 450.4615 381.6738 450.4525 380.2706 c449.598 380.2706 L449.616 381.5389 448.7705 381.8267 448.1408 381.8267 c446.6926 381.8267 446.4407 380.4145 446.4407 378.7774 c446.4407 377.5001 446.6926 376.3128 448.1138 376.3128 c448.5366 376.3128 448.9773 376.4207 449.2742 376.6456 c449.7419 376.9874 449.7509 377.3922 449.7599 377.779 c449.7599 378.5076 L448.3297 378.5076 L448.3297 379.1192 L450.5155 379.1192 L450.5155 375.89 lf*UUu0 R0 G1.125 w450.7044 390.2127 m348.79 390.2127 lS168.7468 390.2127 m290.5854 390.2127 lSUU1 w330.8094 -2683.9933 m(N) *330.8094 3147.9671 m(N) *330.8094 -2132.1858 m(N) *330.8094 2241.7845 m(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_screens_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
